
Variable:
  to create a Variable:
    $primary: #3299ee;
  to use a Variable:
    color: $primary;

Partials:
  Partials is a way to split our code to multiple different files
  like CSS module
  to import Partials:
    at the top a scss files
    @import './path'

Avoid gulp compiling files
  To avoid the gulp compiler to compile files
  for example a files that only contain variables
  we need to add "_" after the file name
  "_variables.scss"

Import Oder:
  while importing the scss module, order matter
    @import "variables";
    @import "base";
  here the "base" module beneficiate from the variables declared
  in "variables" module that is because the import are read from
  top to bottom

Math Operation:
  in SASS it's possible to use math operator to interact 
  with our constant 
    Multiple:
      $font-size-sm: $base-font-size * 0.75;
    Divide:
      To divide we need to import at the top of the 
      file where we use the division the math module
        @use "sass:math";
      and then we can use the math method
        border-radius: math.div(base-border-radius, 4);

Debugging:
  To debug a SASS file we can use the debug directive which 
  print a value on the console
    @debug "hello world";
    @debug $base-border-radius * 4;

Maps:
  Create Maps:
    $colors: (
      "primary": $primary,
      "secondary": $secondary,
      "error": $error,
      "info": $info,
      "blue": #1919e6,
      "red": #e61919,
      "yellow": #e6e619,
      "green": #19e635,
      "orange": #ffa600,
      "purple": #9900ff,
      "gray": #808080,
      "black": black,
      "white": white,
    );

  Access Maps:
    @debug map-get($map: $colors, $key: "purple");
    or 
    @debug map-get($colors, "purple");

  Check if a key is in the Maps:
    @debug map-has-key($colors, "secondary");

  Remove element ($map, $key): 
  
    @debug map-remove($colors, "primary");


  Add elements to the map ($map, $map):
    @debug map-merge(
      $colors,
      (
        "pink": #ffc0cb,
      )
    );

Loops:

  Each loop:
  To loop through a map we need to use the @each directive
  @each $key, $val in $colors {
    .text-#{$key} {
      color: $val;
    }
    .bg-#{$key} {
      background: $value;
    }
  }

  For loop:
    @for $i from 1 through 9 { }





Useful function:
  Mix color:
    Mix color provide a simple way to merge two color this way
    it's make it easy to bright or dark a color, by mixing it to
    with or black

    mix($color1, $color2, $weight: 50%) //=> color 

    Returns a number thatâ€™s a mixture of $color1 and $color2.

    Both the $weight and the relative opacity of each color 
    determines how much of each color is in the result. 
    The $weight must be a number between 0% and 100% (inclusive). 
    A larger weight indicates that more of $color1 should be used, 
    and a smaller weight indicates that more of $color2 should be used.
 


  

